//
// Created by yel on 2021/9/8.
//

// You are given two strings s and t.
//
//String t is generated by random shuffling string s and then add one more letter at a random position.
//
//Return the letter that was added to t.
//
//
//
//Example 1:
//
//Input: s = "abcd", t = "abcde"
//Output: "e"
//Explanation: 'e' is the letter that was added.
//Example 2:
//
//Input: s = "", t = "y"
//Output: "y"
//Example 3:
//
//Input: s = "a", t = "aa"
//Output: "a"
//Example 4:
//
//Input: s = "ae", t = "aea"
//Output: "a"
//
//
//Constraints:
//
//0 <= s.length <= 1000
//t.length == s.length + 1
//s and t consist of lower-case English letters.

// 问题：给定字符串s & t, t由s随机打乱后并在随机位置添加一个字符构成，找出这个字符。

// 方法：由于只包含小写字符，可以构建一个数组/哈希表。首先遍历t中的字符，并在对应位置添加出现次数。然后遍历s,在对应位置减少出现次数。
// 最后剩下次数为1的字符，即为所求字符。 时间优化：可仅遍历一次，最后再对t的最后一个字符进行操作。

// 2. 使用XOR（异或），

#include "string"
#include "vector"

using namespace std;

class Solution {
public:
    char findTheDifference(string s, string t) {
        vector<int> arr(26, 0);
        char res;
//        for (char ch:t)
//            arr[ch - 'a']++;
//        for (char ch:s)
//            arr[ch - 'a']--;
        for (int i = 0; i < s.size(); i++) {
            arr[s[i] - 'a']--;
            arr[t[i] - 'a']++;
        }
        arr[t.back()-'a']++;

        for (int i = 0; i < arr.size(); i++)
            if (arr[i] == 1) {
                res = i + 'a';
                break;
            }
        return res;

    }
};

class Solution2 {
public:
    char findTheDifference(string s, string t) {
        char res = 0;
        int i = 0;
        while(i < s.size()) {
            res ^= s[i] ^ t[i];
            i++;
        }

        return res ^ t[i];
    }
};