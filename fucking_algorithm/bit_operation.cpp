//常用的操作 n&(n-1)
//该方法用于消除数字n的二进制表示中的最后一个1.
//比如 n= 1110100
//则 n-1= 1110011
//n&(n-1)=111000

//Leetcode中计算汉明权重（Hamming weight)：
//输入一个无符号整数，返回二进制表达式中数字位数为'1'的个数
//例：000000000000001011
//out: 3  因为有3个1
//使用位操作就很容易得到
int hammingWeight(uint32_t n) {
    int res=0;
    while (n!=0) {
        n=n&(n-1);
        res++;
    }
    return res;
}

//再比如，判断一个数是不是2的指数
// 在二进制表示中，2的指数只有一个1，其余为0
// 比如2^0=1=0001, 2^1=2=0010,2^2=4=0100
// 常规操作的话，可以通过除以2，判断余数的方式来进行。
// 但是使用位操作的话可以达到O(1)的效果。
bool ispowerOfTwo(int n) {
    if (n<=0) return false;
    return (n&(n-1))==0;
}
